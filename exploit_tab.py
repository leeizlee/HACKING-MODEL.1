#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
익스플로잇 탭
"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
                             QLabel, QTextEdit, QTableWidget, QTableWidgetItem,
                             QGroupBox, QLineEdit, QComboBox, QProgressBar,
                             QMessageBox, QSplitter, QTreeWidget, QTreeWidgetItem,
                             QCheckBox, QSpinBox, QTabWidget)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QFont

class ExploitTab(QWidget):
    """익스플로잇 탭 클래스"""
    
    def __init__(self):
        super().__init__()
        self.init_ui()
        
    def init_ui(self):
        """UI 초기화"""
        layout = QVBoxLayout(self)
        
        # 제목
        title_label = QLabel("⚡ 익스플로잇")
        title_label.setFont(QFont("Arial", 14, QFont.Bold))
        title_label.setStyleSheet("color: #2c3e50; padding: 10px;")
        layout.addWidget(title_label)
        
        # 메인 스플리터
        splitter = QSplitter(Qt.Horizontal)
        
        # 왼쪽 패널 - 익스플로잇 설정
        left_panel = self.create_exploit_config_panel()
        splitter.addWidget(left_panel)
        
        # 오른쪽 패널 - 익스플로잇 결과
        right_panel = self.create_exploit_result_panel()
        splitter.addWidget(right_panel)
        
        splitter.setSizes([400, 600])
        layout.addWidget(splitter)
        
    def create_exploit_config_panel(self):
        """익스플로잇 설정 패널 생성"""
        group_box = QGroupBox("익스플로잇 설정")
        layout = QVBoxLayout(group_box)
        
        # 타겟 설정
        target_group = QGroupBox("타겟 설정")
        target_layout = QVBoxLayout(target_group)
        
        # IP 주소 입력
        ip_layout = QHBoxLayout()
        ip_layout.addWidget(QLabel("타겟 IP:"))
        self.target_ip_edit = QLineEdit()
        self.target_ip_edit.setPlaceholderText("192.168.1.100")
        ip_layout.addWidget(self.target_ip_edit)
        target_layout.addLayout(ip_layout)
        
        # 포트 입력
        port_layout = QHBoxLayout()
        port_layout.addWidget(QLabel("타겟 포트:"))
        self.target_port_edit = QLineEdit()
        self.target_port_edit.setPlaceholderText("445")
        port_layout.addWidget(self.target_port_edit)
        target_layout.addLayout(port_layout)
        
        layout.addWidget(target_group)
        
        # 익스플로잇 모듈 선택
        module_group = QGroupBox("익스플로잇 모듈")
        module_layout = QVBoxLayout(module_group)
        
        # 모듈 검색
        search_layout = QHBoxLayout()
        search_layout.addWidget(QLabel("모듈 검색:"))
        self.module_search_edit = QLineEdit()
        self.module_search_edit.setPlaceholderText("ms17-010, eternalblue 등")
        search_layout.addWidget(self.module_search_edit)
        self.module_search_edit.textChanged.connect(self.search_modules)
        module_layout.addLayout(search_layout)
        
        # 모듈 목록
        self.module_tree = QTreeWidget()
        self.module_tree.setHeaderLabels(["모듈명", "설명", "위험도"])
        self.module_tree.itemSelectionChanged.connect(self.on_module_selected)
        module_layout.addWidget(self.module_tree)
        
        layout.addWidget(module_group)
        
        # 페이로드 설정
        payload_group = QGroupBox("페이로드 설정")
        payload_layout = QVBoxLayout(payload_group)
        
        # 페이로드 타입
        payload_type_layout = QHBoxLayout()
        payload_type_layout.addWidget(QLabel("페이로드 타입:"))
        self.payload_type_combo = QComboBox()
        self.payload_type_combo.addItems([
            "windows/meterpreter/reverse_tcp",
            "windows/shell/reverse_tcp",
            "linux/x86/meterpreter/reverse_tcp",
            "linux/x86/shell/reverse_tcp"
        ])
        payload_type_layout.addWidget(self.payload_type_combo)
        payload_layout.addLayout(payload_type_layout)
        
        # LHOST 설정
        lhost_layout = QHBoxLayout()
        lhost_layout.addWidget(QLabel("LHOST:"))
        self.lhost_edit = QLineEdit()
        self.lhost_edit.setPlaceholderText("192.168.1.50")
        lhost_layout.addWidget(self.lhost_edit)
        payload_layout.addLayout(lhost_layout)
        
        # LPORT 설정
        lport_layout = QHBoxLayout()
        lport_layout.addWidget(QLabel("LPORT:"))
        self.lport_edit = QLineEdit("4444")
        lport_layout.addWidget(self.lport_edit)
        payload_layout.addLayout(lport_layout)
        
        layout.addWidget(payload_group)
        
        # 익스플로잇 제어
        control_group = QGroupBox("익스플로잇 제어")
        control_layout = QVBoxLayout(control_group)
        
        # 진행률 표시
        self.exploit_progress_bar = QProgressBar()
        control_layout.addWidget(self.exploit_progress_bar)
        
        # 버튼들
        button_layout = QHBoxLayout()
        
        self.check_btn = QPushButton("취약점 확인")
        self.check_btn.clicked.connect(self.check_vulnerability)
        button_layout.addWidget(self.check_btn)
        
        self.exploit_btn = QPushButton("익스플로잇 실행")
        self.exploit_btn.clicked.connect(self.execute_exploit)
        button_layout.addWidget(self.exploit_btn)
        
        self.stop_exploit_btn = QPushButton("중지")
        self.stop_exploit_btn.clicked.connect(self.stop_exploit)
        self.stop_exploit_btn.setEnabled(False)
        button_layout.addWidget(self.stop_exploit_btn)
        
        control_layout.addLayout(button_layout)
        layout.addWidget(control_group)
        
        return group_box
        
    def create_exploit_result_panel(self):
        """익스플로잇 결과 패널 생성"""
        group_box = QGroupBox("익스플로잇 결과")
        layout = QVBoxLayout(group_box)
        
        # 결과 탭 위젯
        self.result_tabs = QTabWidget()
        
        # 세션 목록 탭
        self.session_table = QTableWidget()
        self.session_table.setColumnCount(5)
        self.session_table.setHorizontalHeaderLabels(["세션 ID", "타입", "타겟", "상태", "생성 시간"])
        self.result_tabs.addTab(self.session_table, "세션 목록")
        
        # 익스플로잇 로그 탭
        self.exploit_log_text = QTextEdit()
        self.exploit_log_text.setReadOnly(True)
        self.result_tabs.addTab(self.exploit_log_text, "익스플로잇 로그")
        
        # 콘솔 탭
        self.console_text = QTextEdit()
        self.console_text.setReadOnly(True)
        self.result_tabs.addTab(self.console_text, "콘솔")
        
        layout.addWidget(self.result_tabs)
        
        return group_box
        
    def search_modules(self):
        """모듈 검색"""
        search_term = self.module_search_edit.text().lower()
        # 실제 구현에서는 메타스플로잇에서 모듈을 검색
        self.load_sample_modules()
        
    def load_sample_modules(self):
        """샘플 모듈 로드"""
        self.module_tree.clear()
        
        sample_modules = [
            ("exploit/windows/smb/ms17_010_eternalblue", "MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption", "높음"),
            ("exploit/windows/smb/ms08_067_netapi", "MS08-067 Microsoft Server Service Relative Path Stack Corruption", "높음"),
            ("exploit/windows/smb/ms10_061_spoolss", "MS10-061 Microsoft Print Spooler Service Impersonation Vulnerability", "중간"),
            ("exploit/linux/ssh/ssh_login", "SSH Login Utility", "낮음"),
            ("exploit/multi/http/struts2_content_type_ognl", "Apache Struts 2 Content-Type OGNL Injection", "높음")
        ]
        
        for module_name, description, risk in sample_modules:
            item = QTreeWidgetItem([module_name, description, risk])
            self.module_tree.addTopLevelItem(item)
            
    def on_module_selected(self):
        """모듈 선택 시 호출"""
        current_item = self.module_tree.currentItem()
        if current_item:
            module_name = current_item.text(0)
            self.exploit_log_text.append(f"[INFO] 선택된 모듈: {module_name}")
            
    def check_vulnerability(self):
        """취약점 확인"""
        target_ip = self.target_ip_edit.text()
        target_port = self.target_port_edit.text()
        
        if not target_ip or not target_port:
            QMessageBox.warning(self, "경고", "타겟 IP와 포트를 입력해주세요.")
            return
            
        self.exploit_log_text.append(f"[INFO] {target_ip}:{target_port} 취약점을 확인합니다...")
        self.exploit_progress_bar.setValue(0)
        
        # 샘플 취약점 확인 결과
        self.exploit_log_text.append("[INFO] 취약점 확인 완료")
        self.exploit_log_text.append("[VULN] MS17-010 취약점이 발견되었습니다.")
        self.exploit_progress_bar.setValue(100)
        
    def execute_exploit(self):
        """익스플로잇 실행"""
        target_ip = self.target_ip_edit.text()
        target_port = self.target_port_edit.text()
        payload = self.payload_type_combo.currentText()
        
        if not target_ip or not target_port:
            QMessageBox.warning(self, "경고", "타겟 IP와 포트를 입력해주세요.")
            return
            
        self.exploit_log_text.append(f"[INFO] {target_ip}:{target_port}에 {payload} 익스플로잇을 실행합니다...")
        
        # UI 상태 변경
        self.exploit_btn.setEnabled(False)
        self.stop_exploit_btn.setEnabled(True)
        self.exploit_progress_bar.setValue(0)
        
        # 샘플 익스플로잇 실행
        self.simulate_exploit()
        
    def simulate_exploit(self):
        """익스플로잇 시뮬레이션"""
        import time
        
        steps = [
            (20, "[INFO] 익스플로잇 모듈을 로드합니다..."),
            (40, "[INFO] 페이로드를 설정합니다..."),
            (60, "[INFO] 타겟에 연결을 시도합니다..."),
            (80, "[INFO] 익스플로잇을 실행합니다..."),
            (100, "[SUCCESS] 익스플로잇이 성공했습니다! 세션이 생성되었습니다.")
        ]
        
        for progress, message in steps:
            self.exploit_progress_bar.setValue(progress)
            self.exploit_log_text.append(message)
            time.sleep(1)
            
        # 세션 추가
        self.add_sample_session()
        
        # UI 상태 복원
        self.exploit_btn.setEnabled(True)
        self.stop_exploit_btn.setEnabled(False)
        
    def add_sample_session(self):
        """샘플 세션 추가"""
        import datetime
        
        session_data = [
            ("1", "meterpreter", "192.168.1.100:445", "활성", datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        ]
        
        self.session_table.setRowCount(len(session_data))
        for i, (session_id, session_type, target, status, created) in enumerate(session_data):
            self.session_table.setItem(i, 0, QTableWidgetItem(session_id))
            self.session_table.setItem(i, 1, QTableWidgetItem(session_type))
            self.session_table.setItem(i, 2, QTableWidgetItem(target))
            self.session_table.setItem(i, 3, QTableWidgetItem(status))
            self.session_table.setItem(i, 4, QTableWidgetItem(created))
            
    def stop_exploit(self):
        """익스플로잇 중지"""
        self.exploit_log_text.append("[INFO] 익스플로잇을 중지합니다...")
        
        # UI 상태 복원
        self.exploit_btn.setEnabled(True)
        self.stop_exploit_btn.setEnabled(False)
        
    def cleanup(self):
        """정리 작업"""
        pass