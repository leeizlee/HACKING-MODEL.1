#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
취약점 목록 페이지
"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                             QPushButton, QTableWidget, QTableWidgetItem,
                             QProgressBar, QMessageBox, QSplitter, QTextEdit,
                             QFrame, QHeaderView)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QColor, QBrush
import time

class ScanThread(QThread):
    """스캔 스레드"""
    scan_progress = pyqtSignal(int, str)
    scan_complete = pyqtSignal(list)
    
    def __init__(self, target_ip):
        super().__init__()
        self.target_ip = target_ip
        
    def run(self):
        # 스캔 진행 시뮬레이션
        scan_steps = [
            "포트 스캔 중...",
            "서비스 버전 감지 중...",
            "OS 정보 수집 중...",
            "취약점 데이터베이스 검색 중...",
            "취약점 확인 중...",
            "결과 분석 중..."
        ]
        
        for i, step in enumerate(scan_steps, 1):
            self.scan_progress.emit(i * 100 // len(scan_steps), step)
            time.sleep(1)
            
        # 샘플 취약점 데이터 생성
        vulnerabilities = [
            {
                "id": "CVE-2017-0144",
                "name": "MS17-010 EternalBlue",
                "description": "SMB 프로토콜의 원격 코드 실행 취약점",
                "severity": "Critical",
                "port": 445,
                "service": "SMB",
                "status": "Vulnerable",
                "exploit_available": True,
                "exploit_module": "exploit/windows/smb/ms17_010_eternalblue"
            },
            {
                "id": "CVE-2008-4250",
                "name": "MS08-067 NetAPI",
                "description": "Server Service의 상대 경로 스택 손상 취약점",
                "severity": "Critical",
                "port": 445,
                "service": "SMB",
                "status": "Not Vulnerable",
                "exploit_available": True,
                "exploit_module": "exploit/windows/smb/ms08_067_netapi"
            },
            {
                "id": "CVE-2010-2729",
                "name": "MS10-061 Print Spooler",
                "description": "Print Spooler 서비스의 가장 취약점",
                "severity": "High",
                "port": 135,
                "service": "RPC",
                "status": "Vulnerable",
                "exploit_available": True,
                "exploit_module": "exploit/windows/smb/ms10_061_spoolss"
            },
            {
                "id": "CVE-2014-0160",
                "name": "Heartbleed",
                "description": "OpenSSL의 Heartbeat 확장 취약점",
                "severity": "High",
                "port": 443,
                "service": "HTTPS",
                "status": "Not Vulnerable",
                "exploit_available": True,
                "exploit_module": "auxiliary/scanner/ssl/openssl_heartbleed"
            },
            {
                "id": "CVE-2012-1823",
                "name": "PHP CGI Argument Injection",
                "description": "PHP CGI의 인수 주입 취약점",
                "severity": "Medium",
                "port": 80,
                "service": "HTTP",
                "status": "Vulnerable",
                "exploit_available": True,
                "exploit_module": "exploit/multi/http/php_cgi_arg_injection"
            },
            {
                "id": "CVE-2014-6271",
                "name": "Shellshock",
                "description": "Bash의 환경 변수 처리 취약점",
                "severity": "High",
                "port": 80,
                "service": "HTTP",
                "status": "Not Vulnerable",
                "exploit_available": True,
                "exploit_module": "exploit/multi/http/apache_mod_cgi_bash_env_exec"
            }
        ]
        
        self.scan_complete.emit(vulnerabilities)

class VulnerabilityListPage(QWidget):
    """취약점 목록 페이지"""
    
    def __init__(self, target_ip):
        super().__init__()
        self.target_ip = target_ip
        self.vulnerabilities = []
        self.selected_vulnerability = None
        self.init_ui()
        self.start_scan()
        
    def init_ui(self):
        """UI 초기화"""
        layout = QVBoxLayout(self)
        
        # 제목
        title_label = QLabel(f"🔍 {self.target_ip} 취약점 분석 결과")
        title_label.setFont(QFont("Arial", 16, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("color: #2c3e50; padding: 20px;")
        layout.addWidget(title_label)
        
        # 스캔 진행률
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # 상태 메시지
        self.status_label = QLabel("스캔을 시작합니다...")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("color: #3498db; padding: 10px; font-weight: bold;")
        layout.addWidget(self.status_label)
        
        # 메인 스플리터
        splitter = QSplitter(Qt.Horizontal)
        
        # 왼쪽 - 취약점 목록
        left_panel = self.create_vulnerability_list_panel()
        splitter.addWidget(left_panel)
        
        # 오른쪽 - 상세 정보
        right_panel = self.create_detail_panel()
        splitter.addWidget(right_panel)
        
        splitter.setSizes([600, 400])
        layout.addWidget(splitter)
        
        # 하단 버튼들
        button_layout = QHBoxLayout()
        
        self.refresh_btn = QPushButton("🔄 새로고침")
        self.refresh_btn.clicked.connect(self.start_scan)
        self.refresh_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        button_layout.addWidget(self.refresh_btn)
        
        self.hack_btn = QPushButton("⚡ 모의해킹 시작")
        self.hack_btn.clicked.connect(self.start_hacking)
        self.hack_btn.setEnabled(False)
        self.hack_btn.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
            }
        """)
        button_layout.addWidget(self.hack_btn)
        
        button_layout.addStretch()
        
        self.back_btn = QPushButton("← 뒤로가기")
        self.back_btn.clicked.connect(self.go_back)
        self.back_btn.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        button_layout.addWidget(self.back_btn)
        
        layout.addLayout(button_layout)
        
    def create_vulnerability_list_panel(self):
        """취약점 목록 패널 생성"""
        frame = QFrame()
        frame.setFrameStyle(QFrame.StyledPanel)
        layout = QVBoxLayout(frame)
        
        # 패널 제목
        panel_title = QLabel("📋 발견된 취약점 목록")
        panel_title.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(panel_title)
        
        # 취약점 테이블
        self.vuln_table = QTableWidget()
        self.vuln_table.setColumnCount(6)
        self.vuln_table.setHorizontalHeaderLabels(["CVE ID", "취약점명", "위험도", "상태", "포트", "서비스"])
        
        # 테이블 스타일 설정
        self.vuln_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #bdc3c7;
                background-color: white;
                alternate-background-color: #f8f9fa;
            }
            QHeaderView::section {
                background-color: #34495e;
                color: white;
                padding: 8px;
                border: none;
                font-weight: bold;
            }
        """)
        
        # 열 너비 조정
        header = self.vuln_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # CVE ID
        header.setSectionResizeMode(1, QHeaderView.Stretch)           # 취약점명
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # 위험도
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)  # 상태
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)  # 포트
        header.setSectionResizeMode(5, QHeaderView.ResizeToContents)  # 서비스
        
        # 행 선택 이벤트 연결
        self.vuln_table.itemSelectionChanged.connect(self.on_vulnerability_selected)
        
        layout.addWidget(self.vuln_table)
        
        return frame
        
    def create_detail_panel(self):
        """상세 정보 패널 생성"""
        frame = QFrame()
        frame.setFrameStyle(QFrame.StyledPanel)
        layout = QVBoxLayout(frame)
        
        # 패널 제목
        panel_title = QLabel("📄 취약점 상세 정보")
        panel_title.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(panel_title)
        
        # 상세 정보 텍스트
        self.detail_text = QTextEdit()
        self.detail_text.setReadOnly(True)
        self.detail_text.setStyleSheet("""
            QTextEdit {
                background-color: #f8f9fa;
                border: 1px solid #bdc3c7;
                border-radius: 5px;
                padding: 10px;
                font-family: 'Courier New', monospace;
                font-size: 12px;
            }
        """)
        layout.addWidget(self.detail_text)
        
        return frame
        
    def start_scan(self):
        """스캔 시작"""
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        self.status_label.setText("스캔을 시작합니다...")
        self.status_label.setStyleSheet("color: #3498db; padding: 10px; font-weight: bold;")
        self.refresh_btn.setEnabled(False)
        self.hack_btn.setEnabled(False)
        
        # 스캔 스레드 시작
        self.scan_thread = ScanThread(self.target_ip)
        self.scan_thread.scan_progress.connect(self.on_scan_progress)
        self.scan_thread.scan_complete.connect(self.on_scan_complete)
        self.scan_thread.start()
        
    def on_scan_progress(self, progress, message):
        """스캔 진행률 업데이트"""
        self.progress_bar.setValue(progress)
        self.status_label.setText(message)
        
    def on_scan_complete(self, vulnerabilities):
        """스캔 완료"""
        self.vulnerabilities = vulnerabilities
        self.progress_bar.setVisible(False)
        self.status_label.setText(f"✅ 스캔 완료! {len(vulnerabilities)}개의 취약점을 발견했습니다.")
        self.status_label.setStyleSheet("color: #27ae60; padding: 10px; font-weight: bold;")
        self.refresh_btn.setEnabled(True)
        
        # 테이블에 데이터 추가
        self.populate_vulnerability_table()
        
    def populate_vulnerability_table(self):
        """취약점 테이블에 데이터 추가"""
        self.vuln_table.setRowCount(len(self.vulnerabilities))
        
        for i, vuln in enumerate(self.vulnerabilities):
            # CVE ID
            cve_item = QTableWidgetItem(vuln['id'])
            self.vuln_table.setItem(i, 0, cve_item)
            
            # 취약점명
            name_item = QTableWidgetItem(vuln['name'])
            self.vuln_table.setItem(i, 1, name_item)
            
            # 위험도
            severity_item = QTableWidgetItem(vuln['severity'])
            if vuln['severity'] == 'Critical':
                severity_item.setBackground(QBrush(QColor(231, 76, 60, 100)))  # 빨간색
            elif vuln['severity'] == 'High':
                severity_item.setBackground(QBrush(QColor(243, 156, 18, 100)))  # 주황색
            else:
                severity_item.setBackground(QBrush(QColor(46, 204, 113, 100)))  # 초록색
            self.vuln_table.setItem(i, 2, severity_item)
            
            # 상태
            status_item = QTableWidgetItem(vuln['status'])
            if vuln['status'] == 'Vulnerable':
                status_item.setBackground(QBrush(QColor(231, 76, 60, 100)))  # 빨간색
            else:
                status_item.setBackground(QBrush(QColor(46, 204, 113, 100)))  # 초록색
            self.vuln_table.setItem(i, 3, status_item)
            
            # 포트
            port_item = QTableWidgetItem(str(vuln['port']))
            self.vuln_table.setItem(i, 4, port_item)
            
            # 서비스
            service_item = QTableWidgetItem(vuln['service'])
            self.vuln_table.setItem(i, 5, service_item)
            
    def on_vulnerability_selected(self):
        """취약점 선택 시 호출"""
        current_row = self.vuln_table.currentRow()
        if current_row >= 0 and current_row < len(self.vulnerabilities):
            vuln = self.vulnerabilities[current_row]
            self.selected_vulnerability = vuln
            
            # 상세 정보 표시
            detail_text = f"""
CVE ID: {vuln['id']}
이름: {vuln['name']}
설명: {vuln['description']}
위험도: {vuln['severity']}
포트: {vuln['port']}
서비스: {vuln['service']}
상태: {vuln['status']}
익스플로잇 가능: {'예' if vuln['exploit_available'] else '아니오'}

"""
            
            if vuln['exploit_available']:
                detail_text += f"익스플로잇 모듈: {vuln['exploit_module']}\n"
                
            if vuln['status'] == 'Vulnerable':
                detail_text += "\n⚠️ 이 취약점은 모의해킹이 가능합니다."
                
            self.detail_text.setPlainText(detail_text)
            
            # 모의해킹 버튼 활성화 (취약한 취약점만)
            if vuln['status'] == 'Vulnerable' and vuln['exploit_available']:
                self.hack_btn.setEnabled(True)
            else:
                self.hack_btn.setEnabled(False)
                
    def start_hacking(self):
        """모의해킹 시작"""
        if not self.selected_vulnerability:
            QMessageBox.warning(self, "경고", "모의해킹할 취약점을 선택해주세요.")
            return
            
        vuln = self.selected_vulnerability
        
        # 경고 메시지
        reply = QMessageBox.question(self, "모의해킹 확인", 
                                   f"'{vuln['name']}' 취약점으로 모의해킹을 시작하시겠습니까?\n\n"
                                   "⚠️ 이는 교육 목적의 모의해킹입니다.\n"
                                   "실제 시스템에 대한 무단 접근은 법적 문제를 야기할 수 있습니다.",
                                   QMessageBox.Yes | QMessageBox.No,
                                   QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            # 모의해킹 페이지로 이동
            self.start_simulation_hacking(vuln)
            
    def start_simulation_hacking(self, vulnerability):
        """모의해킹 시뮬레이션 시작"""
        # 여기서는 간단한 메시지 박스로 대체
        # 실제로는 모의해킹 페이지로 이동해야 함
        QMessageBox.information(self, "모의해킹 시작", 
                              f"'{vulnerability['name']}' 모의해킹을 시작합니다.\n\n"
                              "이 기능은 향후 구현 예정입니다.")
        
    def go_back(self):
        """뒤로가기"""
        parent = self.parent()
        if parent and hasattr(parent, 'show_main_page'):
            parent.show_main_page()
        elif parent and hasattr(parent, 'stacked_widget'):
            # MainWindow가 아니거나 show_main_page가 없을 때 스택 첫 페이지로 이동
            parent.stacked_widget.setCurrentIndex(0)
        else:
            # 부모가 없거나 예외 상황일 때 무시
            pass
